#!/usr/bin/env python3

from paho import mqtt
from argparse import ArgumentParser
from os.path import isfile
import subprocess
import json

OPT = "/opt/ue-operator/"
REPOS = ["ai-server/", "environment/", "first-door/", "indoorloc/", "mission-briefing/", "prototype/", "safe/",
         "second-door/"]
SCRIPTNAME = "server.py"


class ProcessList(list):
    def append(self, cmd, cwd=None, stderr=None):
        if isinstance(cmd, str) or isinstance(cmd, list):
            process = subprocess.Popen(cmd, shell=isinstance(cmd, str), cwd=cwd, stderr=stderr)
        else:
            raise TypeError("Expecting a string or a list as cmd")
        # process.check_returncode()
        super().append(process)

    def wait(self):
        try:
            for process in self:
                process.wait()
        except subprocess.CalledProcessError as e:
            print(str(e))
            self.wait()


def on_scale(client, userdata, message):
    try:
        data = json.loads(message.payload.lower())
        if data["method"] and data["method"] == "status" and data["state"]:
            if data["state"] == "active":
                gyro = "on"
            elif data["state"] == "inactive":
                gyro = "off"
            else:
                return
            # TODO: add t-t-s "Put the prototype back" and maybe lights?
            msgs = [("2/gyrophare", json.dumps({"method": "TRIGGER", "state": "power", "data": gyro}))]
            mqtt.publish.multiple(msgs, hostname="10.0.0.2")
    except json.JSONDecodeError:
        pass


if __name__ == "__main__":
    parser = ArgumentParser(description='Command-line interface for the ubilab-escape operator')
    parser.add_argument('command', metavar='CMD', type=str, choices=["init", "start", "help"], nargs="?",
                        help='the command to execute\n(init, start)', default="help")
    parser.add_argument("-f", "--fallback", action="store_true", default=False, help="use the fallback camera control")
    help_text = "definition of the workflow.\nFormat: module:class\nwith get method returning an array of Workflows."
    parser.add_argument("--workflow_def", "-d", help=help_text)
    args = parser.parse_args()
    pl = ProcessList()

    try:
        """
            Initializing the network and stuff
        """
        if args.command == "init":
            pl.append(["git", "clone", "--recurse-submodules", "https://github.com/ubilab-escape/integration",
                       OPT + "integration"])
            pl.append(["git", "clone", "--recurse-submodules", "https://github.com/OliverF/mjpeg-relay.git",
                       "/opt/mjpeg-relay"])
            pl.append(["python", "-m", "pip", "install", "-r", "requirements.txt"], cwd="/opt/mjpeg-relay/")
            pl.wait()

        """
            Starting all services and scripts
        """
        if args.command == "start":
            for rep in REPOS:
                if not isfile(OPT + "integration/" + rep + SCRIPTNAME):
                    continue
                pl.append(["python3", OPT + "integration/" + rep + SCRIPTNAME], stderr=subprocess.STDOUT)
            if args.fallback:
                pl.append(["python3", "/usr/bin/ue-camera"])
            else:
                for i in range(1, 6):
                    pl.append(
                        ["python", "relay.py", "-p", "808" + str(i), "-w", "1234" + str(i), "http://10.0.1." + str(i)],
                        cwd="/opt/mjpeg-relay/")
            pl.append(["mosquitto", "-c", OPT + "mosquitto.conf"])
            logic_command = ["python3", OPT + "logic/main.py"]
            if args.workflow_def: logic_command.extend(["-d", args.workflow_def])
            pl.append(logic_command)
            pl.append("mosquitto_sub -h localhost -t \\# -v | ts '%s' >" +
                      "/var/log/mosquitto/message_log_$(date +%Y-%m-%d_%H%M%S).txt")
            mqtt.subscribe.callback(on_scale, "6/puzzle/scale", hostname="10.0.0.2")
            pl.wait()

        """
            Outputting the help
        """
        if args.command == "help":
            print("Select a CMD to execute")
            parser.parse_args(["--help"])
            exit(1)
    except KeyboardInterrupt:
        for p in pl:
            try:
                p.terminate()
            except KeyboardInterrupt:
                pass
        print("Operator ended by user")
        exit(0)
