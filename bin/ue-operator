#!/usr/bin/env python3

from paho.mqtt import subscribe, publish
from argparse import ArgumentParser
from os import remove
from wget import download
import subprocess
import json

OPT = "/opt/ue-operator/"
GITHUB = "https://github.com/ubilab-escape/operator/"


class ProcessList(list):
    """
    List to manage created processes
    """

    def append(self, cmd, cwd=None, stderr=None):
        """
        Creates a new process and adds it to the list

        :param cmd: The command to execute
        :param cwd: An optional working directory
        :param stderr: An optional stderr redirection
        :return: None
        """
        if isinstance(cmd, str) or isinstance(cmd, list):
            process = subprocess.Popen(cmd, shell=isinstance(cmd, str), cwd=cwd,
                                       stderr=stderr)
        else:
            raise TypeError("Expecting a string or a list as cmd")
        # process.check_returncode()
        super().append(process)

    def wait(self):
        """
        Waits for all processes in list to finish -> locks process

        :return:
        """
        try:
            for process in self:
                process.wait()
        except subprocess.CalledProcessError as e:
            print(str(e))
            self.wait()


def on_scale(client, userdata, message):
    """
    Listener for new messages in the scale mqtt topic

    :param client: The mqtt client
    :param userdata: User information
    :param message: The received message (message.payload / message.topic)
    :return: None
    """
    try:
        data = json.loads(message.payload.lower())
        if data["method"] and data["method"] == "status" and data["state"]:
            msgs = []
            if data["state"] == "active":
                gyro = "on"
                # TODO: Commented for quota reasons
                # msgs.append(
                #    ("2/textToSpeech", json.dumps({"method": "message",
                #    "data": "Put the prototype back!"})))
            elif data["state"] == "inactive":
                gyro = "off"
            else:
                return
            msgs.append(("2/gyrophare", json.dumps(
                {"method": "trigger", "state": "power", "data": gyro})))
            publish.multiple(msgs, hostname="10.0.0.2")
    except json.JSONDecodeError:
        pass


if __name__ == "__main__":
    parser = ArgumentParser(
        description='Command-line interface for the ubilab-escape operator')
    parser.add_argument('command', metavar='CMD', type=str,
                        choices=["init", "start", "update", "help"], nargs="?",
                        help='the command to execute\n(init, start)',
                        default="help")
    parser.add_argument("-f", "--fallback", action="store_true", default=False,
                        help="use the fallback camera control")
    help_text = "definition of the workflow.\n" \
                "Format: module:class\n" \
                "with get method returning an array of Workflows."
    parser.add_argument("--workflow_def", "-d", help=help_text)
    parser.add_argument("-v", "--version", action="version",
                        version="%(prog)s %VERSION%")
    args = parser.parse_args()
    pl = ProcessList()

    try:
        """
            Initializing requirements not fetched over apt
        """
        if args.command == "init":
            pl.append(
                ["git", "clone", "https://github.com/ubilab-escape/environment",
                 OPT + "environment"])
            pl.wait()
            pl.append(
                ["python3", "-m", "pip", "install", "-r", "requirements.txt"],
                cwd=OPT + "environment/text_to_speech")
            pl.append(["git", "clone", "--recurse-submodules",
                       "https://github.com/OliverF/mjpeg-relay.git",
                       "/opt/mjpeg-relay"])
            pl.wait()
            pl.append(
                ["python", "-m", "pip", "install", "-r", "requirements.txt"],
                cwd="/opt/mjpeg-relay/")
            pl.append(["sudo", "snap", "install", "mosquitto"])
            pl.append(["sudo", "systemctl", "disable", "snapd"])
            pl.wait()

        """
            Initializing the network and stuff
        """
        if args.command == "update":
            pl.append(["git", "pull"], cwd=OPT + "environment")
            pl.append(["git", "pull"], cwd="/opt/mjpeg-relay")
            try:
                remove("ue-operator.deb")
                remove("ue-operator.deb.asc")
            except FileNotFoundError:
                pass
            download(GITHUB + "releases/latest/download/ue-operator.deb")
            print("")
            download(GITHUB + "releases/latest/download/ue-operator.deb.asc")
            print("")
            pl.append(["gpg", "--textmode", "--verify", "ue-operator.deb.asc",
                       "ue-operator.deb"])
            pl.wait()
            pl.append(["sudo", "apt", "-qq", "install", "./ue-operator.deb"])
            pl.wait()
            remove("ue-operator.deb")
            remove("ue-operator.deb.asc")

        """
            Starting all services and scripts
        """
        if args.command == "start":
            pl.append(
                ["python3", OPT + "environment/text_to_speech/main.py", "-c",
                 "/home/alexa/text_to_speech/text_to_speech.cfg"],
                stderr=subprocess.STDOUT
            )
            if args.fallback:
                pl.append(["python3", "/usr/bin/ue-camera"])
            else:
                for i in range(1, 6):
                    pl.append(
                        ["python", "relay.py", "-p", "808" + str(i), "-w",
                         "1234" + str(i), "http://10.0.1." + str(i)],
                        cwd="/opt/mjpeg-relay/"
                    )
            pl.append(["mosquitto", "-c", OPT + "mosquitto.conf"])
            logic_command = ["python3", OPT + "logic/main.py"]
            if args.workflow_def:
                logic_command.extend(["-d", args.workflow_def])
            pl.append(logic_command)
            pl.append("mosquitto_sub -h localhost -t \\# -v | ts '%s' >"
                      "/var/log/mosquitto/message_log_"
                      "$(date +%Y-%m-%d_%H%M%S).txt")
            subscribe.callback(on_scale, "6/puzzle/scale", hostname="10.0.0.2")
            pl.wait()

        """
            Outputting the help
        """
        if args.command == "help":
            print("Select a CMD to execute")
            parser.parse_args(["--help"])
            exit(1)
    except KeyboardInterrupt:
        for p in pl:
            try:
                p.terminate()
            except KeyboardInterrupt:
                pass
        print("Operator ended by user")
        exit(0)
