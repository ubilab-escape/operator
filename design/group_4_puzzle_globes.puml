@startuml group_4_puzzle_globes
actor operator
participant MQTT_4_globes
box "Globes"
    collections slaves
    participant master
end box
participant MQTT_4_door_entry

== Init ==
master -> MQTT_4_door_entry: register
master -> MQTT_4_globes: register
slaves -> MQTT_4_globes: register

== Solve puzzle ==
operator -> MQTT_4_globes: trigger: on [#participants]
MQTT_4_globes -> master: trigger: on [#participants]
MQTT_4_globes -> slaves: trigger: on [#participants]

loop [while door is open (state != inactive [closed])]
    alt [on all globes are touched]
        master -> MQTT_4_door_entry: trigger: off
        ...
        MQTT_4_door_entry -> master: state: inactive [closed]
    else [on any globe was released]
        master -> MQTT_4_door_entry: trigger: on
    else
        ...
        master -> MQTT_4_globes: state: active [stateOfAllGlobes]
        note left
            The master publishes the states
            of all globes.
        end note
        ...
        slaves -> MQTT_4_globes: message: active [id, isTouched]
        note left
            Type "MESSAGE" because of
            internal communication
        end note
    else 
    end

end

MQTT_4_globes <- master: state: solved
operator <- MQTT_4_globes: state: solved
@enduml